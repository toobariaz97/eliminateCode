"use strict";

var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
var _glob = require("glob");
var _acorn = require("acorn");
var _escodegen = require("escodegen");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Define your optimization logic here
function optimizeCode(code) {
  // Implement your code elimination logic here
  // For a simple example, we'll return the code as is.
  return code;
}

// Get command-line arguments for source and destination directories
const sourceDirectory = process.argv[2];
const destinationDirectory = process.argv[3];
if (!sourceDirectory || !destinationDirectory) {
  console.error('Usage: node your-script.js <source_directory> <destination_directory>');
  process.exit(1);
}

// Check if source directory exists
if (!_fsExtra.default.existsSync(sourceDirectory) || !_fsExtra.default.lstatSync(sourceDirectory).isDirectory()) {
  console.error('Source directory does not exist or is not a directory.');
  process.exit(1);
}

// Create the destination directory if it doesn't exist
_fsExtra.default.ensureDirSync(destinationDirectory);
console.log(destinationDirectory, sourceDirectory);

// Use glob to find all JavaScript files in the source directory

const g = new _glob.Glob("*.js", {
  ignore: "node_modules"
});
const files = await (0, _glob.glob)(`*.js`, {
  ignore: "node_modules",
  cwd: sourceDirectory
}, async (err, files) => {
  console.log("data");
  if (err) {
    console.error(err);
    return;
  }

  // Process each JavaScript file
  files.forEach(file => {
    const sourceFilePath = _path.default.join(sourceDirectory, file);
    const destinationFilePath = _path.default.join(destinationDirectory, file);

    // Read the file contents
    const code = _fsExtra.default.readFileSync(sourceFilePath, 'utf-8');

    // Parse the code into an Abstract Syntax Tree (AST)
    const ast = Parser.acorn(code, {
      ecmaVersion: 'latest'
    });

    // Optimize the code (replace this with your optimization logic)
    const optimizedCode = optimizeCode((0, _escodegen.generate)(ast));

    // Ensure the destination directory exists
    _fsExtra.default.ensureDirSync(_path.default.dirname(destinationFilePath));

    // Write the optimized code to the destination file
    _fsExtra.default.writeFileSync(destinationFilePath, optimizedCode, 'utf-8');
  });
  console.log('Code optimization completed.');
});
files.forEach(file => {
  const sourceFilePath = _path.default.join(sourceDirectory, file);
  console.log(sourceFilePath, "sourceFilePath");
  const destinationFilePath = _path.default.join(destinationDirectory, file);
  const code = _fsExtra.default.readFileSync(sourceFilePath, 'utf-8');
  const ast = (0, _acorn.parse)(code, {
    ecmaVersion: 'latest'
  });
  ast.body = ast.body.filter(node => {
    // Remove function declarations
    if (node.type === 'FunctionDeclaration') {
      return false;
    }
    const optimizedCode = optimizeCode((0, _escodegen.generate)(ast));
    _fsExtra.default.ensureDirSync(_path.default.dirname(destinationFilePath));
    _fsExtra.default.writeFileSync(destinationFilePath, optimizedCode, 'utf-8');
    return true;
  });
  console.log('Code optimization completed.');
});
